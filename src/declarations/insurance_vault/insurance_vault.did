type ValidatedEventData = 
 record {
   details_json: text;
   event_type: text;
   severity: text;
 };
type Result = 
 variant {
   err: text;
   ok: text;
 };
type InsuranceVault = 
 service {
   /// Add a new funder (only callable by admin).
   add_funder: (funder_to_add: principal) -> (Result);
   /// Fund the vault with liquidity (only by authorized funders).
   fund_vault: (amount: nat) -> (Result);
   get_authorized_funders: () -> (vec principal) query;
   get_total_liquidity: () -> (nat) query;
   /// Release initial funding to a DAO (only callable by EventFactory).
   release_initial_funding: (dao_canister_id: principal, event_data:
    ValidatedEventData) -> (Result);
 };
/// ------------------------------------------------------------
/// Actor: InsuranceVault
/// Description:
///   - Manages liquidity to back DAOs created by EventFactory.
///   - Handles authorized funders, vault funding, and event-based payouts.
///   - Liquidity is released to EventDAO based on event severity.
/// ------------------------------------------------------------
service : (init_factory_id: principal, init_funder_id: principal, init_admin_id: principal) -> InsuranceVault
